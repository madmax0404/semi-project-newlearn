<?xml version="1.0" encoding="UTF-8"?>
<web-app version="4.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_4_0.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- 
		현재 context(어플리케이션)에서 사용할 전역변수를 등록하는 영역.
		contextConfigLocation은 ContextLoaderListener에 의해 읽혀진다.
	 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/*-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests 
	
		DispatcherServlet은 클라이언트의 요청을 항상 첫 번째로 받아내는 spring의 대표 servlet으로, Front Controller 라고 부른다.
		DispatcherServlet은 초기화시 전달받은 param 값으로 bean 객체를 생성 및 관리하는 IOC Container를 사용한다.
	-->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 
			init-param: DispatcherServlet이 사용할 spring 설정 정보를 읽기 위한 파일경로를 저장하는 속성. 
		 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<!-- 
			load-on-startup: 서버 시작과 동시에 서블릿을 생성하게 하는 속성
		 -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!-- 
		url-pattern: /는 모든 요청을 서블릿으로 매핑하기 위한 속성으로 "기본 서블릿 패턴"이라고 불린다.
		             /는 특정 URL패턴과 일치하지 않는 "나머지"요청들을 모두 받아줄 수 있다.
	 -->		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- <servlet-mapping>
	    <servlet-name>default</servlet-name>
	    <url-pattern>/favicon.ico</url-pattern>
	</servlet-mapping> -->
	
	<!-- 필터 등록 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value> <!-- 인코딩 타입 설정 -->
		</init-param>
		
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value> <!-- 인코딩 충돌시 강제 인코딩 설정 -->
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<!-- filter-name은 filter로 등록한 filter-name과 동일해야한다.    -->
		<url-pattern>/*</url-pattern> 
		<!-- 인코딩을 적용할 url패턴 설정 -->
	</filter-mapping>
	
	<!-- 
		Multipart 형식의 데이터를 처리하기 위한 필터
		- DispatcherServlet이 Request를 MultipartRequest로 파싱하기 전, Filter 단계에서 파싱하도록 하는 필터.
		
		why?
		- 사용자가 multipart/form-data 형식으로 request를 전송한 경우 Spring의 DispatcherServlet은 요청 내용을 MultipartRequest로 파싱한다.
		- 단, Spring-Security 모듈의 filterChain은 DispatcherServlet보다 먼저 실행되며, 이 시점에서는 request가 파싱되지 않았으므로,
		  request에 담긴 보안토큰(csrf)의 데이터를 제대로 읽어올 수 없다.
		- 이로 인해 csrf 인증 오류 발생. 
	-->
	<filter>
        <filter-name>multipartFilter</filter-name>
        <filter-class>org.springframework.web.multipart.support.MultipartFilter
        </filter-class>
        <!-- root.xml에 등록한 multipartResolver등록 -->
        <init-param>
            <param-name>multipartResolverBeanName</param-name>
            <param-value>multipartResolver</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>multipartFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
	
	<!-- spring security filter chain 등록하기 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>









