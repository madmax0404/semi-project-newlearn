<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chat">
	<!-- 친구 목록 조회 -->
	<select id="selectFriendList" resultMap="friendListResultMap">
		SELECT
		    M.USER_NO,
		    I.CHANGE_NAME,
		    M.USER_NAME,
		    MP.STATUS_MESSAGE
		FROM FRIEND F
		LEFT JOIN MEMBER M ON F.FRIEND_USER_NO = M.USER_NO
		LEFT JOIN MYPAGE MP ON F.FRIEND_USER_NO = MP.USER_NO
		LEFT JOIN MYPAGE_IMG MPI ON MP.MYPAGE_NO = MPI.MYPAGE_NO AND TYPE='profile'
		LEFT JOIN IMAGE I ON MPI.IMG_NO = I.IMG_NO
		WHERE F.USER_NO = #{userNo} AND F.RESPONSE_STATUS = '수락'
	</select>
	<resultMap type="friendDTO" id="friendListResultMap">
		<id column="user_no" property="userNo"/>
		<result column="change_name" property="changeName"/>
		<result column="user_name" property="userName"/>
		<result column="status_message" property="statusMessage"/>
	</resultMap>
	
	<!-- 채팅방 목록 조회 -->
	<select id="selectChattingRoomList" resultMap="chattingRoomListResultMap">
		SELECT 
		    CR.CHAT_ROOM_NO,
		    CR.CHAT_TITLE,
		    CR.CHAT_PUBLIC,
		    M.USER_NAME,
		    I.CHANGE_NAME,
		    CJC.PARTICIPANT_COUNT,
		    CJ.ROOM_NOTI,
		    UNREAD.UNREAD_COUNT
		FROM CHAT_ROOM CR
		LEFT JOIN MEMBER M ON CR.USER_NO = M.USER_NO
		LEFT JOIN MYPAGE MP ON CR.USER_NO = MP.USER_NO
		LEFT JOIN MYPAGE_IMG MPI ON MP.MYPAGE_NO = MPI.MYPAGE_NO AND MPI.TYPE = 'profile'
		LEFT JOIN IMAGE I ON MPI.IMG_NO = I.IMG_NO
		LEFT JOIN (
		    SELECT 
		        CHAT_ROOM_NO,
		        COUNT(USER_NO) AS PARTICIPANT_COUNT
		    FROM CHAT_JOIN 
		    GROUP BY CHAT_ROOM_NO
		) CJC ON CR.CHAT_ROOM_NO = CJC.CHAT_ROOM_NO
		LEFT JOIN (
		    SELECT
		        CM.CHAT_ROOM_NO,
		        COUNT(CM.MESSAGE_NO) AS UNREAD_COUNT
		    FROM CHAT_MESSAGE CM
		    LEFT JOIN CHAT_MESSAGE_READ CMR ON CM.MESSAGE_NO = CMR.MESSAGE_NO AND CMR.USER_NO = #{userNo}
		    WHERE CMR.READ_STATUS IS NULL OR CMR.READ_STATUS != 'Y'
		    GROUP BY CM.CHAT_ROOM_NO
		) UNREAD ON CR.CHAT_ROOM_NO = UNREAD.CHAT_ROOM_NO
		LEFT JOIN CHAT_JOIN CJ ON CR.CHAT_ROOM_NO = CJ.CHAT_ROOM_NO AND CJ.USER_NO = #{userNo}
		WHERE CJ.USER_NO IS NOT NULL
	</select>
	<resultMap type="chattingRoomDTO" id="chattingRoomListResultMap">
		<id column="chat_room_no" property="chatRoomNo"/>
		<result column="chat_title" property="chatTitle"/>
		<result column="chat_public" property="chatPublic"/>
		<result column="user_name" property="userName"/>
		<result column="change_name" property="changeName"/>
		<result column="participant_count" property="participantCount"/>
		<result column="room_noti" property="roomNoti"/>
		<result column="unread_count" property="unreadCount"/>
	</resultMap>
	
	<!-- 채팅방 생성 -->
	<insert id="createRoom" parameterType="map">
        <selectKey keyProperty="chatRoomNo" resultType="int" order="BEFORE">
            SELECT
                CASE WHEN MAX(CHAT_ROOM_NO) IS NULL
                    THEN 1
                    ELSE MAX(CHAT_ROOM_NO) + 1
                END
            FROM CHAT_ROOM
        </selectKey>

        INSERT INTO CHAT_ROOM VALUES
        (#{chatRoomNo}, #{userNo}, #{chatTitle}, DEFAULT,
        <choose>
            <when test="chatPublic.equals('Y')">null</when>
            <otherwise>#{chatPw}</otherwise>
        </choose>
        , #{chatPublic}, DEFAULT)
    </insert>

    <insert id="insertUserJoin" parameterType="map">
        INSERT INTO CHAT_JOIN VALUES
        (#{userNo}, #{chatRoomNo}, DEFAULT, NULL, DEFAULT)
    </insert>

    <insert id="insertFriendJoin" parameterType="map">
        INSERT ALL
        <foreach collection="selectFriendList" item="friendUserNo">
            INTO CHAT_JOIN VALUES (#{friendUserNo}, #{chatRoomNo}, DEFAULT, NULL, DEFAULT)
        </foreach>
        SELECT * FROM DUAL
    </insert>
    
    <select id="checkUserJoin" resultType="int">
    	SELECT COUNT(*)
    	FROM CHAT_JOIN
    	WHERE CHAT_ROOM_NO = #{chatRoomNo}
    	AND USER_NO = #{userNo}
    </select>
    
    <select id="chatRoomMembers" resultType="friendDTO">
    	SELECT 
    		M.USER_NO,
		    CHANGE_NAME, 
		    USER_NAME,
		    STATUS_MESSAGE,
		    DECODE(CR.USER_NO, M.USER_NO, 1,0) IS_OWNER
		FROM CHAT_JOIN CJ
		JOIN MEMBER M ON CJ.USER_NO = M.USER_NO
		LEFT JOIN CHAT_ROOM CR USING(CHAT_ROOM_NO)
		LEFT JOIN MYPAGE MY ON M.USER_NO = MY.USER_NO
		LEFT JOIN MYPAGE_IMG MI ON MY.MYPAGE_NO = MI.MYPAGE_NO and MI.TYPE='profile'
		LEFT JOIN IMAGE USING(IMG_NO)
		WHERE CHAT_ROOM_NO = #{chatRoomNo} AND CR.DELETED = 'N'
    </select>
    
    <select id="chatMessageList" resultType="ChatMessageDTO">
    	SELECT 
    	   MESSAGE_NO,
		   M.USER_NO ,
		   I1.CHANGE_NAME AS PROFILE,
		   I2.CHANGE_NAME AS ATTACHMENT,
		   USER_NAME,
		   CONTENT,
		   IS_NOTI,
		   NOTI_DATE
		FROM CHAT_MESSAGE CM
		JOIN MEMBER M ON CM.USER_NO = M.USER_NO
		LEFT JOIN MYPAGE MY ON M.USER_NO = MY.USER_NO
		LEFT JOIN MYPAGE_IMG MI ON MY.MYPAGE_NO = MI.MYPAGE_NO and MI.TYPE='profile'
		LEFT JOIN IMAGE I1 USING(IMG_NO)
		LEFT JOIN CHAT_IMG CI USING (MESSAGE_NO)
		LEFT JOIN IMAGE I2 ON CI.IMG_NO = I2.IMG_NO
		WHERE CHAT_ROOM_NO = #{chatRoomNo} 
		AND CM.DELETED = 'N'
		ORDER BY CM.SEND_DATE ASC
    </select>
	
	<insert id="insertChatMessage">
		<selectKey keyProperty="messageNo" order="BEFORE" resultType="int">
			SELECT SEQ_CHAT_MESSAGE_NO.NEXTVAL FROM DUAL
		</selectKey>
	
		INSERT INTO CHAT_MESSAGE 
		VALUES (#{messageNo},#{chatRoomNo} , #{userNo}, DEFAULT, #{content}, DEFAULT, DEFAULT, NULL)
	</insert>	
	
	
	<insert id="insertImage">
		<selectKey keyProperty="imgNo" order="BEFORE" resultType="int">
			SELECT SEQ_IMG_NO.NEXTVAL FROM DUAL
		</selectKey>
	
		INSERT INTO IMAGE 
		VALUES (#{imgNo},#{originName} , #{changeName}, DEFAULT)
	</insert>
	
	<insert id="insertChatImage">
		INSERT INTO CHAT_IMG 
		VALUES (#{messageNo}, #{imgNo}, SEQ_CHAT_IMG.NEXTVAL)
	</insert>

	<!-- 채팅 내용 검색-->
	<select id="searchMsg" resultType="ChatMessageDTO">  
		SELECT *
		FROM CHAT_MESSAGE
		WHERE CHAT_ROOM_NO = #{chatRoomNo} AND CONTENT LIKE '%'+||#{keyword}||+'%'
	</select>
	
	<update id="updateChatMessage">
		UPDATE CHAT_MESSAGE SET
			IS_NOTI = 'Y' , 
			NOTI_DATE = SYSDATE
		WHERE MESSAGE_NO = #{messageNo}
	</update>
	
	<delete id="roomExit">
		DELETE FROM CHAT_JOIN
		WHERE USER_NO = #{userNo} AND
      		  CHAT_ROOM_NO = #{chatRoomNo}
	</delete>
	
	<update id="updateChatContent">
	    UPDATE CHAT_MESSAGE
	    SET CONTENT = #{content}
	    WHERE MESSAGE_NO = #{messageNo}
	</update>
	
	<update id="deleteChatContent">
		UPDATE CHAT_MESSAGE
		SET DELETED = 'Y'
		WHERE MESSAGE_NO = #{messageNo}
	</update>
	
	<resultMap type="ChattingRoomDTO" id="chatRoomMap">
		<id column="CHAT_ROOM_NO" property="chatRoomNo" />
		<result column="CHAT_TITLE" property="chatTitle" />
		<result column="CHAT_PUBLIC" property="chatPublic" />
		<result column="CHAT_PW" property="chatPw" />
		<collection property="selectFriendList" ofType="java.lang.Integer">
			<result column="USER_NO"/>
		</collection>
	</resultMap>
	
	<select id="selectChatRoom" resultMap="chatRoomMap">
		SELECT 
		    CHAT_ROOM_NO,
		    CR.CHAT_TITLE,
		    CR.CHAT_PUBLIC,
		    CR.CHAT_PW ,
            M.USER_NO
		FROM CHAT_ROOM CR -- 채팅방 정보
		LEFT JOIN CHAT_JOIN CJ USING(CHAT_ROOM_NO) -- 참여자 정보
        LEFT JOIN MEMBER M ON M.USER_NO = CJ.USER_NO -- 참여자 회원정보
        WHERE CHAT_ROOM_NO = #{chatRoomNo} AND M.USER_NO IN (
            SELECT F.FRIEND_USER_NO FROM FRIEND F
            LEFT JOIN MEMBER M ON F.FRIEND_USER_NO = M.USER_NO
            WHERE F.USER_NO = #{userNo} AND F.RESPONSE_STATUS = '수락' 
            UNION 
            SELECT #{userNo} FROM DUAL
        )
	</select>
	
	<select id="selectFriendNo" resultType="int">
		SELECT
		    M.USER_NO
		FROM FRIEND F
		LEFT JOIN MEMBER M ON F.FRIEND_USER_NO = M.USER_NO
		WHERE F.USER_NO = #{userNo} AND F.RESPONSE_STATUS = '수락'
	</select>

	<!-- 은성이의 똥코드 (채팅방 설정) -->
	<update id="updateChatRoom">
		UPDATE CHAT_ROOM SET
			CHAT_TITLE = #{chatTitle},
			CHAT_PUBLIC = #{chatPublic},
			CHAT_PW = 
			<choose>
	            <when test="chatPublic.equals('Y')">null</when>
	            <otherwise>#{chatPw}</otherwise>
	        </choose>
		WHERE CHAT_ROOM_NO = #{chatRoomNo}
	</update>
	
</mapper>